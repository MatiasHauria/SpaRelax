/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Vista;

import Modelo.Cliente;
import Persistencia.ClienteData;
import Persistencia.Conexion;
import static Vista.jfSpaRelax.listaClientes;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luca
 */
public class jifGestionClientes extends javax.swing.JInternalFrame {
    Conexion conexion = new Conexion();
    ClienteData cd = new ClienteData(conexion);
    private String estadoOperacion = "ninguno";
    private int codClienteSeleccionado = -1;
    private boolean tablaVisible = false;
    private boolean estadoLogicoCambiado = false;
    
    private final DefaultTableModel modelo = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
        
    };
    /**
     * Creates new form jifGestionClientes
     */
    public jifGestionClientes() {
        initComponents();
        armarCabecera();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jtfDNI = new javax.swing.JTextField();
        jtfNombreCompleto = new javax.swing.JTextField();
        jtfTelefono = new javax.swing.JTextField();
        jtfEdad = new javax.swing.JTextField();
        jtfAfecciones = new javax.swing.JTextField();
        jtfEstado = new javax.swing.JTextField();
        jbNuevo = new javax.swing.JButton();
        jbActualizar = new javax.swing.JButton();
        jbBorrar = new javax.swing.JButton();
        jbAlta = new javax.swing.JButton();
        jbBaja = new javax.swing.JButton();
        jbGuardar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtTablaClientes = new javax.swing.JTable();
        jbMostrarClientes = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Nirmala UI", 1, 24)); // NOI18N
        jLabel1.setText("Gestion de Clientes");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Nombre Completo:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("DNI:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Telefono:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Edad:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Afecciones:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Estado:");

        jtfDNI.setEnabled(false);

        jtfNombreCompleto.setEnabled(false);

        jtfTelefono.setEnabled(false);

        jtfEdad.setEnabled(false);

        jtfAfecciones.setEnabled(false);

        jtfEstado.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(45, 45, 45)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtfDNI)
                    .addComponent(jtfNombreCompleto, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                    .addComponent(jtfTelefono)
                    .addComponent(jtfEdad)
                    .addComponent(jtfAfecciones)
                    .addComponent(jtfEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtfDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtfNombreCompleto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtfTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jtfEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jtfAfecciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jtfEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jbNuevo.setText("Nuevo");
        jbNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNuevoActionPerformed(evt);
            }
        });

        jbActualizar.setText("Actualizar");
        jbActualizar.setEnabled(false);
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });

        jbBorrar.setText("Borrar");
        jbBorrar.setEnabled(false);
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });

        jbAlta.setText("Alta");
        jbAlta.setEnabled(false);
        jbAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAltaActionPerformed(evt);
            }
        });

        jbBaja.setText("Baja");
        jbBaja.setEnabled(false);
        jbBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBajaActionPerformed(evt);
            }
        });

        jbGuardar.setText("Guardar");
        jbGuardar.setEnabled(false);
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jtTablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtTablaClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtTablaClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtTablaClientes);

        jbMostrarClientes.setText("Mostrar Clientes");
        jbMostrarClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbMostrarClientesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(162, 162, 162))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jbMostrarClientes)
                        .addGap(218, 218, 218))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jbActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jbNuevo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jbBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jbAlta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jbBaja, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jbGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 26, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())))
            .addComponent(jSeparator1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jbNuevo)
                        .addGap(18, 18, 18)
                        .addComponent(jbActualizar)
                        .addGap(18, 18, 18)
                        .addComponent(jbBorrar)
                        .addGap(18, 18, 18)
                        .addComponent(jbAlta)
                        .addGap(18, 18, 18)
                        .addComponent(jbBaja)
                        .addGap(30, 30, 30)
                        .addComponent(jbGuardar)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbMostrarClientes)
                .addGap(17, 17, 17))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void cargarTabla() {
        listaClientes = cd.obtenerClientes();
        modelo.setRowCount(0);

        for (Cliente c : listaClientes) {
            Object[] fila = {
                c.getIdCliente(),
                c.getDni(),
                c.getNombreCompleto(),
                c.getEdad(),
                c.getTelefono(),
                c.isEstado()
            };
            modelo.addRow(fila);
        }
    }
    
    private Cliente buscarClientePorCodigo(int codigoCliente) {
        listaClientes = cd.obtenerClientes();
        
        for (Cliente c : listaClientes) {
            if (c.getIdCliente()== codigoCliente) {
                return c;
            }
        }
        return null;
    }
    
    private void jbNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNuevoActionPerformed
        estadoOperacion = "Nuevo";

        jtfDNI.setText("");
        jtfNombreCompleto.setText("");
        jtfTelefono.setText("");
        jtfEdad.setText("");
        jtfAfecciones.setText("");
        jtfEstado.setText("false");

        jtfDNI.setEnabled(true);
        jtfNombreCompleto.setEnabled(true);
        jtfTelefono.setEnabled(true);
        jtfEdad.setEnabled(true);
        jtfAfecciones.setEnabled(true);
        
        jbNuevo.setEnabled(false);
        jbAlta.setEnabled(true);
        jbBaja.setEnabled(true);
        jbGuardar.setEnabled(true);
    }//GEN-LAST:event_jbNuevoActionPerformed

    private void jbMostrarClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbMostrarClientesActionPerformed
        if (tablaVisible == false) {
            cargarTabla();
            tablaVisible = true;
            jbMostrarClientes.setText("Ocultar Clientes");
        } else {
            modelo.setRowCount(0);
            jbMostrarClientes.setText("Mostrar Clientes");
            tablaVisible = false;
        }
    }//GEN-LAST:event_jbMostrarClientesActionPerformed

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        estadoOperacion = "Actualizar";
        int filaSeleccionada = jtTablaClientes.getSelectedRow();

        if (filaSeleccionada != -1) {
            Object valorId = jtTablaClientes.getValueAt(filaSeleccionada, 0);

            int codigoCliente = Integer.parseInt(valorId.toString());
            this.codClienteSeleccionado = codigoCliente;
            Cliente clienteSeleccionado = buscarClientePorCodigo(codigoCliente);

            if (clienteSeleccionado != null) {
                jtfDNI.setText(String.valueOf(clienteSeleccionado.getDni()));
                jtfNombreCompleto.setText(clienteSeleccionado.getNombreCompleto());
                jtfTelefono.setText(String.valueOf(clienteSeleccionado.getTelefono()));
                jtfEdad.setText(String.valueOf(clienteSeleccionado.getEdad()));
                jtfAfecciones.setText(clienteSeleccionado.getAfecciones());
                jtfEstado.setText(String.valueOf(clienteSeleccionado.isEstado()));
                
                jtfDNI.setEnabled(true);
                jtfNombreCompleto.setEnabled(true);
                jtfTelefono.setEnabled(true);
                jtfEdad.setEnabled(true);
                jtfAfecciones.setEnabled(true);

                jbGuardar.setEnabled(true);
                jbNuevo.setEnabled(false);
                jbBorrar.setEnabled(false);
                jbActualizar.setEnabled(false);
                jbAlta.setEnabled(true);
                jbBaja.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jbActualizarActionPerformed

    private void jtTablaClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtTablaClientesMouseClicked
        int filaSeleccionada = jtTablaClientes.getSelectedRow();
        if (filaSeleccionada != -1) {
            jbNuevo.setEnabled(false);
            jbActualizar.setEnabled(true);
            jbBorrar.setEnabled(true);
        }
    }//GEN-LAST:event_jtTablaClientesMouseClicked

    private void jbAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAltaActionPerformed
        if ("false".equals(jtfEstado.getText())) {
            jtfEstado.setText("true");
            estadoLogicoCambiado = true;
        } else{
            JOptionPane.showMessageDialog(this, "El Estado ya es true, para cambiarlo a false usar el boton 'Baja'"
                    , "Error de Logica", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbAltaActionPerformed

    private void jbBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBajaActionPerformed
        if ("true".equals(jtfEstado.getText())) {
            jtfEstado.setText("false");
            estadoLogicoCambiado = true;
        } else {
            JOptionPane.showMessageDialog(this, "El Estado ya es false, para cambiarlo a true usar el boton 'Alta'"
            , "Error de Logica", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbBajaActionPerformed

    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
        jbNuevo.setEnabled(false);
        jbActualizar.setEnabled(false);
        
        int filaSeleccionada = jtTablaClientes.getSelectedRow();

        if (filaSeleccionada != -1) {            
            int opcion = JOptionPane.showConfirmDialog(this, "Estas seguro de que queres borrar los datos del Cliente?",
                    "Confirmar Borrado", JOptionPane.YES_NO_OPTION);
            if (opcion == JOptionPane.YES_OPTION) {
                Object valorId = jtTablaClientes.getValueAt(filaSeleccionada, 0);
                int codigoCliente = Integer.parseInt(valorId.toString());
                Cliente clienteSeleccionado = buscarClientePorCodigo(codigoCliente);
                
                if (clienteSeleccionado != null) {
                    cd.borrarCliente(clienteSeleccionado.getIdCliente());
                    JOptionPane.showMessageDialog(this, "Cliente borrado con exito.");

                    cargarTabla();
                    jtfDNI.setText("");
                    jtfNombreCompleto.setText("");
                    jtfTelefono.setText("");
                    jtfEdad.setText("");
                    jtfAfecciones.setText("");
                    jtfEstado.setText("");
                    jbBorrar.setEnabled(false);
                    jbNuevo.setEnabled(true);
                    jbAlta.setEnabled(false);
                    jbBaja.setEnabled(false);
                } else {
                    JOptionPane.showMessageDialog(this, "No se encontro el Cliente.", "Error de Busqueda",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        } else{
            JOptionPane.showMessageDialog(this, "No se Encontro la Fila Seleccionada.", "Error de Busqueda",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbBorrarActionPerformed

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        String regex = "^[a-zA-ZáéíóúÁÉÍÓÚñÑ\\s]+$";
        boolean clienteExiste = false;
        
        if (jtfDNI.getText().isEmpty() || jtfNombreCompleto.getText().isEmpty() || jtfTelefono.getText().isEmpty() ||
                jtfEdad.getText().isEmpty() || jtfAfecciones.getText().isEmpty() || jtfEstado.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Todos los campos deben estar completos.", "Error, Campos Vacíos",
                    JOptionPane.ERROR_MESSAGE);
        }
        
        try {
            
            if (!jtfNombreCompleto.getText().matches(regex) && !jtfNombreCompleto.getText().isEmpty() || 
                    !jtfAfecciones.getText().matches(regex) && !jtfAfecciones.getText().isEmpty() || 
                    !jtfEstado.getText().matches(regex) && !jtfEstado.getText().isEmpty() || 
                    jtfDNI.getText().matches(regex) && !jtfDNI.getText().isEmpty() || 
                    jtfTelefono.getText().matches(regex) && !jtfTelefono.getText().isEmpty() ||
                    jtfEdad.getText().matches(regex) && !jtfEdad.getText().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Uno o Muchos campos contienen caracteres incorrectos", 
                            "Error de Formato", JOptionPane.ERROR_MESSAGE);
            }
        } catch(NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "En DNI, Edad y Telefono solo debe ingresar numeros.", 
                    "Error de Formato Numerico", JOptionPane.ERROR_MESSAGE);
        }
        
        listaClientes = cd.obtenerClientes();
        int dniIngresado = Integer.parseInt(jtfDNI.getText());
        
        if (estadoOperacion.equalsIgnoreCase("Nuevo")) {
            
            for (Cliente cliente : listaClientes) {
                if (cliente.getDni() == dniIngresado) {
                    clienteExiste = true;
                    break;
                } 
            }
        
            if (clienteExiste) {
                JOptionPane.showMessageDialog(this, "Ya existe un Cliente con el DNI ingresado.",
                        "Error. Cliente Existente", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            
            Cliente nuevoCliente = new Cliente(Integer.parseInt(jtfDNI.getText()), jtfNombreCompleto.getText(), 
                    Long.parseLong(jtfTelefono.getText()), Integer.parseInt(jtfEdad.getText()),
                    jtfAfecciones.getText());
            nuevoCliente.setEstado(Boolean.parseBoolean(jtfEstado.getText()));
            
            cd.insertarCliente(nuevoCliente);
            JOptionPane.showMessageDialog(this, "¡Cliente agregado con exito!");
            
            estadoOperacion = "Ninguno";
            
        } else if (estadoOperacion.equalsIgnoreCase("Actualizar")) {
            int codClienteActualizar = this.codClienteSeleccionado;
            boolean estadoFinal = "true".equals(jtfEstado.getText());
            Cliente clienteActualizar = buscarClientePorCodigo(codClienteActualizar);
            
            if (clienteActualizar != null) {                
                cd.actualizarCliente(codClienteActualizar, Integer.parseInt(jtfDNI.getText()), 
                        jtfNombreCompleto.getText(), Long.parseLong(jtfTelefono.getText()), 
                        Integer.parseInt(jtfEdad.getText()), jtfAfecciones.getText());
                
                if (estadoLogicoCambiado) { 
                    if (estadoFinal) {
                        cd.altaCliente(codClienteActualizar);
                    } else {
                        cd.bajaCliente(codClienteActualizar);
                    }
                    estadoLogicoCambiado = false; 
                } else {
                    JOptionPane.showMessageDialog(this, "Cliente actualizado con Exito!");
                }
                this.codClienteSeleccionado = -1;
            } else{
                JOptionPane.showMessageDialog(this, "No se encontro el Cliente.", "Error de Busqueda", 
                        JOptionPane.ERROR_MESSAGE);
            }
            estadoOperacion = "Ninguno";
        }
        
        if (jbMostrarClientes.getText().equalsIgnoreCase("Mostrar Clientes")) {
                cargarTabla();
                jbMostrarClientes.setText("Ocultar Clientes");
            } else if (jbMostrarClientes.getText().equalsIgnoreCase("Ocultar Clientes")) {
                cargarTabla();
            }
        
        
        jtfDNI.setText("");
        jtfNombreCompleto.setText("");
        jtfTelefono.setText("");
        jtfEdad.setText("");
        jtfAfecciones.setText("");
        jtfEstado.setText("");
        
        jbGuardar.setEnabled(false);
        jbNuevo.setEnabled(true);
        
        
        jtfDNI.setEnabled(false);
        jtfNombreCompleto.setEnabled(false);
        jtfTelefono.setEnabled(false);
        jtfEdad.setEnabled(false);
        jtfAfecciones.setEnabled(false);
    }//GEN-LAST:event_jbGuardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbAlta;
    private javax.swing.JButton jbBaja;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbMostrarClientes;
    private javax.swing.JButton jbNuevo;
    private javax.swing.JTable jtTablaClientes;
    private javax.swing.JTextField jtfAfecciones;
    private javax.swing.JTextField jtfDNI;
    private javax.swing.JTextField jtfEdad;
    private javax.swing.JTextField jtfEstado;
    private javax.swing.JTextField jtfNombreCompleto;
    private javax.swing.JTextField jtfTelefono;
    // End of variables declaration//GEN-END:variables
private void armarCabecera() {
        modelo.addColumn("Codigo");
        modelo.addColumn("DNI");
        modelo.addColumn("Nombre Completo");
        modelo.addColumn("Edad");
        modelo.addColumn("Telefono");
        modelo.addColumn("Estado");

        jtTablaClientes.setModel(modelo);
    }
}
